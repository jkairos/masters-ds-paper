\section{Related work}
\label{sec:related}

Researches on distributed spatial data either show techniques to debug distributed applications in general or techniques for R-tree distributed processing.  
Techniques for debugging a distributed R-Tree index was not found in literature.
The Section \ref{dist_debug} shows the distributed debugging researches and \ref{spatialdist} describes researches of platforms for processing distributed spatial algorithms.
	
\subsection{Distributed Debugging Techniques}
\label{dist_debug}

In \cite{remeD2011} the author breaks down debuggers in two main families: log-based debuggers (also known as post-mortem debuggers) and breakpoint-based debuggers 
(also known as online debuggers). 
Log-based debuggers insert log statements in the code to be able to generate a trace log during its execution. 
Breakpoint-based debuggers, on the other hand, execute the program in the debug mode that allows programs to pause/resume the execution at certain points, 
inspect the state and the perform step-by-step execution. 

Several breakpoint-based debuggers have been designed for parallel programs using message passing communication including p2d2 \cite{p2d21996}, TotalView \cite{totalView2009}, and Amoeba \cite{amoeba1989}. 
These debuggers offer the traditional commands to stop, inspect and execute step-by-step a running program. 
Some of them allow to set breakpoints on statements of one process (e.g. \cite{totalView2009}) or a set of processes (e.g. \cite{p2d21996}, \cite{amoeba1989}). 

A great body of concurrent and parallel debugging techniques are event-based. 
Event-based debuggers \cite{mcdowell1989Debugging} conceive the execution of a program as a sequence of events. 
The debugger records the history of the events generated by the application, which can then be used to either browse the events once the application is finished \cite{xtrace2007,causeway2009}, 
or to replay the execution to recreate the conditions under which the bug was observed. 
 
\cite{cheung1990Framework} describes a process for distributed debugging in general and does not focus on a specific debugger or a particular technique, 
the paper focus is on defining a step-by-step approach to tackle distributed debugging independent of the environment. 
	
\subsection{Distributed Spatial Algorithms}
\label{spatialdist}

This Section describes briefly the researches that present the use of parallelism in order to improve the response time of the spatial algorithms. 
M-RTree \cite{koudas1996declustering} was the first published paper, 
which shows a shared-nothing architecture, with a master and several workstations connected to a LAN network. 
The master machine can be a bottleneck because it handles and client requests and moreover merges the answers of the slaves and send to client machines. 
A similar technique was found on MC-RTree \cite{schnitzer1999master} and \cite{an1999storing}, which show the same problems on master machine.

Hadoop-GIS \cite{kerr2009alternative} shows a scalable and high performance spatial data warehousing system for running large scale spatial queries on Hadoop. 
However, it does not use index to process the spatial operations. \cite{dedsi} presents a platform to process distributed spatial operations. 
Although, the solution proposed in \cite{dedsi} implements a distributed index, it is not scalable, since every message go through the replicated master node. 
\cite{de2013processamento} shows a hybrid peer-to-peer platform, which comprehends a set of machines for naming resolution that could be
a bottleneck in the system.   

\cite{xie2008two} introduces a two-phase load-balancing scheme for the parallel GIS operations in distributed environment.
\cite{zhang2009spatial} describes MapReduce and shows how spatial queries can be naturally expressed in this model.
However, it is only indicated for non-indexed datasets. 

A number of techniques and platforms have been proposed for handling spatial big data.
Nevertheless, none of the researches propose a technique for distributed spatial index debugging of an R-Tree.
Besides, none of them propose a platform using a peer-to-peer approach for processing distributed spatial algorithms as found on DistGeo platform \ref{sub:dist_geo}.